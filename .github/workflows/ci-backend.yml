name: Java CI/CD for OKE

on:
  push:
    branches:
      - test
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x BackEnd/car-rental/gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('BackEnd/car-rental/**/*.gradle*', 'BackEnd/car-rental/**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Build and Test
        working-directory: BackEnd/car-rental
        run: |
          ./gradlew build --no-daemon --stacktrace
          ./gradlew test --no-daemon --stacktrace

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
            echo "Docker credentials are missing. Exiting."
            exit 1
          fi
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Build and Push Docker image to Docker Hub
        run: |
          IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/rentalservice:${{ github.sha }}
          docker build -t $IMAGE_TAG BackEnd/car-rental
          docker push $IMAGE_TAG

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OCI CLI
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults
          echo "export PATH=\$HOME/bin:\$PATH" >> $GITHUB_ENV
          source $GITHUB_ENV

      - name: Ajouter OCI CLI au PATH
        run: echo "$HOME/bin" >> $GITHUB_PATH

      - name: Vérifier OCI CLI
        run: |
          echo "Chemin actuel : $PATH"
          ls -lah $HOME/bin/
          which oci
          oci --version

      - name: Configure OCI CLI for Kubernetes access
        env:
          OCI_CLUSTER_ID: ${{ secrets.OCI_CLUSTER_ID }}  # Identifiant du cluster
          OCI_API_KEY: ${{ secrets.OCI_API_KEY }}  # Clé API pour l'authentification OCI
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}  # OCID du tenancy
          OCI_REGION: "eu-paris-1"  # Région OCI (à ajuster si nécessaire)
          KUBECONFIG: ${{ secrets.KUBECONFIG }}  # Le fichier kube config du cluster
        run: |
          # Vérifiez si les variables sont définies
          if [ -z "$OCI_CLUSTER_ID" ] || [ -z "$OCI_API_KEY" ] || [ -z "$OCI_TENANCY_OCID" ]; then
            echo "Une ou plusieurs variables OCI manquent. Exiting."
            exit 1
          fi
      
          # Créer le répertoire OCI si nécessaire
          mkdir -p ~/.oci
      
          # Créer le fichier de configuration OCI (~/.oci/config) avec les variables d'environnement
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=$OCI_TENANCY_OCID" >> ~/.oci/config
          echo "fingerprint=$(echo $OCI_API_KEY | base64 -d)" >> ~/.oci/config  # Assurez-vous que la clé est base64-encoded si nécessaire
          echo "key_file=$OCI_API_KEY" >> ~/.oci/config
          echo "tenancy=$OCI_TENANCY_OCID" >> ~/.oci/config
          echo "region=$OCI_REGION" >> ~/.oci/config
      
          # Si vous avez un fichier kube config secret, l'écrire dans ~/.kube/config
          mkdir -p ~/.kube
          echo "$KUBECONFIG" > ~/.kube/config
      
          # Vérifiez si le fichier kube/config existe
          if [ ! -f ~/.kube/config ]; then
            echo "Le fichier kube/config est manquant. Exiting."
            exit 1
          fi
      
          # Créer le kubeconfig avec l'OCI CLI pour accéder au cluster Kubernetes
          oci ce cluster create-kubeconfig --cluster-id "$OCI_CLUSTER_ID" --file $HOME/.kube/config --region "$OCI_REGION" --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT
      
          echo "Configuration OCI terminée avec succès."
    
    
    
    
    
    
    
    
    
      - name: Configure Kubernetes context
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG }}
        run: |
          if [ -z "$KUBECONFIG_B64" ]; then
            echo "Kubeconfig is missing. Exiting."
            exit 1
          fi
          mkdir -p ~/.kube
          echo "$KUBECONFIG_B64" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config
          export KUBECONFIG=~/.kube/config

      - name: Verify Kubernetes connection
        run: |
          kubectl cluster-info || { echo "Kubernetes cluster connection failed"; exit 1; }
          kubectl get nodes || { echo "Failed to fetch Kubernetes nodes"; exit 1; }

      - name: Apply Kubernetes deployment
        run: |
          kubectl apply -f ./BackEnd/k8s/car-rental-deployement.yml
          kubectl rollout status deployment/car-rental -n default || { echo "Deployment rollout failed"; exit 1; }
